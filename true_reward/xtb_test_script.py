import subprocess
import numpy as np
from rdkit import Chem
from rdkit.Chem import AllChem
import torch


def atomic_symbol(z):
    """Convert atomic number to symbol."""
    # types_symbols_to_number = {'H': 0, 'C': 1, 'N': 2, 'O': 3, 'F': 4}
    types_number_to_symbols = ['H', 'C', 'N', 'O', 'F']
    return types_number_to_symbols[int(z)]


def molecule_to_xyz(molecule, format_type, filename="molecule.xyz"):
    """
    Convert a molecule from RDKit, DGL, or PyTorch Geometric format to an XYZ file.
    
    Args:
        molecule: The molecule object (RDKit Mol, DGLGraph, or PyTorch Geometric Data).
        format_type: The format of the molecule ("rdkit", "dgl", or "pyg" (pytorch_geometric)).
        filename: The output XYZ filename.
    """
    if format_type == "rdkit":
        # RDKit molecule
        molecule = Chem.AddHs(molecule)  # Add hydrogens if needed
        AllChem.EmbedMolecule(molecule)  # Generate 3D coordinates
        AllChem.MMFFOptimizeMolecule(molecule)  # Optional: Optimize geometry
        num_atoms = molecule.GetNumAtoms()
        atomic_numbers = [atom.GetAtomicNum() for atom in molecule.GetAtoms()]
        atomic_symbols = [atom.GetSymbol() for atom in molecule.GetAtoms()]
        positions = molecule.GetConformer().GetPositions()
    elif format_type == "dgl":
        # DGL graph
        # atomic_numbers = molecule.ndata["atomic_number"].numpy()
        atomic_numbers = torch.argmax(molecule.ndata['a_1'], dim=-1).numpy()
        atomic_symbols = [atomic_symbol(z) for z in atomic_numbers]
        # positions = molecule.ndata["pos"].numpy()
        positions = molecule.ndata['x_1'].numpy()
    elif format_type == "pyg":
        # PyTorch Geometric Data object
        atomic_numbers = molecule.z.numpy()
        atomic_symbols = [atomic_symbol(z) for z in atomic_numbers]
        positions = molecule.pos.numpy()
    else:
        raise ValueError("Unsupported format type. Use 'rdkit', 'dgl', or 'pyg' (pytorch_geometric).")

    # Write to XYZ file
    with open(filename, "w") as f:
        f.write(f"{len(atomic_numbers)}\n")
        f.write("Generated by molecule_to_xyz\n")
        for symbol, pos in zip(atomic_symbols, positions):
            f.write(f"{symbol} {pos[0]:.6f} {pos[1]:.6f} {pos[2]:.6f}\n")


def run_xtb(xyz_file, quantity="homolumo"):
    """
    Run xtb on an XYZ file and extract the specified quantity.
    
    Args:
        xyz_file: Path to the XYZ file.
        quantity: The quantity to compute ("homolumo" for HOMO-LUMO gap, "energy" for total energy).
    
    Returns:
        The computed quantity.
    """
    # Run xtb
    result = subprocess.run(["xtb", xyz_file], capture_output=True, text=True)
    output = result.stdout

    # Parse output for the specified quantity
    if quantity == "homolumo":
        homo = None
        lumo = None
        try:
            for line in output.split("\n"):
                if "HOMO" in line:
                    homo = float(line.split()[-2])
                elif "LUMO" in line:
                    lumo = float(line.split()[-2])
                if (homo is not None) and (lumo is not None):
                    return lumo - homo, lumo, homo
        except:
            raise ValueError("HOMO or LUMO not found in xtb output.")
    elif quantity == "energy":
        for line in output.split("\n"):
            if "total energy" in line:
                return float(line.split()[-3])
        raise ValueError("Total energy not found in xtb output.")
    else:
        raise ValueError(f"Unsupported quantity: {quantity}")


def compute_quantity(molecule, format_type, quantity="homolumo"):
    """
    Compute a specified quantity for a molecule using xtb.
    
    Args:
        molecule: The molecule object (RDKit Mol, DGLGraph, or PyTorch Geometric Data).
        format_type: The format of the molecule ("rdkit", "dgl", or "pyg" (pytorch_geometric)).
        quantity: The quantity to compute ("homolumo" for HOMO-LUMO gap, "energy" for total energy).
    
    Returns:
        The computed quantity.
    """
    # Convert molecule to XYZ file
    xyz_file = "temp_molecule.xyz"
    molecule_to_xyz(molecule, format_type, xyz_file)

    # Run xtb and compute the quantity
    value = run_xtb(xyz_file, quantity)

    # Clean up temporary file
    subprocess.run(["rm", xyz_file])

    return value


# Example usage
if __name__ == "__main__":
    # Example: RDKit molecule
    from rdkit.Chem import MolFromSmiles
    smiles = "CCO"  # Ethanol
    rdkit_mol = MolFromSmiles(smiles)
    quantity_value = compute_quantity(rdkit_mol, "rdkit", "homolumo")
    homolumo_gap = quantity_value[0]
    lumo = quantity_value[1]
    homo = quantity_value[2]
    print(f"HOMO-LUMO gap (RDKit): {homolumo_gap} eV")
    print(f"LUMO: {lumo} eV, HOMO: {homo} eV")

    quantity_value = compute_quantity(rdkit_mol, "rdkit", "energy")
    print(f'Energy of Ethanol: {quantity_value} eV')

    # Example: PyTorch Geometric molecule
    from torch_geometric.data import Data
    atomic_numbers = torch.tensor([1, 0, 0, 0, 0])  # Methane
    positions = torch.tensor([[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [-1.0, 0.0, 0.0]])
    pytorch_geo_mol = Data(z=atomic_numbers, pos=positions)
    quantity_value = compute_quantity(rdkit_mol, "rdkit", "homolumo")
    if type(quantity_value) == tuple:
        homolumo_gap = quantity_value[0]
        lumo = quantity_value[1]
        homo = quantity_value[2]
        print(f"HOMO-LUMO gap (RDKit): {homolumo_gap} eV")
        print(f"LUMO: {lumo} eV, HOMO: {homo} eV")
