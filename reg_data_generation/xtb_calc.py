import re
import torch
import subprocess
from rdkit.Chem import GetPeriodicTable

def extract_dipole(output: str) -> float:
    """
    Extract the total dipole moment (Debye) from xTB output.
    Looks for the 'full:' line under 'molecular dipole'.
    """
    # Pattern: look for 'full:' followed by 3 floats (x, y, z) and then 1 float (total)
    pattern = re.compile(
        r"full:\s+"                # start of line
        r"([-+]?\d*\.\d+|\d+)\s+"  # x
        r"([-+]?\d*\.\d+|\d+)\s+"  # y
        r"([-+]?\d*\.\d+|\d+)\s+"  # z
        r"([-+]?\d*\.\d+|\d+)"     # total dipole
    )
    
    match = pattern.search(output)
    if not match:
        raise ValueError("Dipole not found in xTB output")
    
    # The last group is the total dipole in Debye
    return float(match.group(4))

def extract_homo_lumo(output: str) -> tuple:
    """
    Extract the HOMO-LUMO gap, LUMO, and HOMO energies from xTB output.
    """
    homo = None
    lumo = None
    for line in output.split("\n"):
        if "HOMO" in line:
            homo = float(line.split()[-2])
        elif "LUMO" in line:
            lumo = float(line.split()[-2])
        if (homo is not None) and (lumo is not None):
            return lumo - homo, lumo, homo
    raise ValueError("HOMO or LUMO not found in xtb output.")

def extract_energy(output: str) -> float:
    for line in output.split("\n"):
            if "total energy" in line:
                return float(line.split()[-3])
    raise ValueError("Total energy not found in xtb output.")

def atomic_symbol(z: int) -> str:
    """Convert atomic number (int) to element symbol (str)."""
    pt = GetPeriodicTable()
    return pt.GetElementSymbol(int(z))

def molecule_to_xyz(molecule, format_type, filename="molecule.xyz"):
    """
    Convert a molecule from RDKit, DGL, or PyTorch Geometric format to an XYZ file.
    
    Args:
        molecule: The molecule object (RDKit Mol, DGLGraph, or PyTorch Geometric Data).
        format_type: The format of the molecule ("rdkit" or "dgl").
        filename: The output XYZ filename.
    """
    if format_type == "rdkit":
        # RDKit molecule
        atomic_numbers = [atom.GetAtomicNum() for atom in molecule.GetAtoms()]
        atomic_symbols = [atom.GetSymbol() for atom in molecule.GetAtoms()]
        positions = molecule.GetConformer().GetPositions()
    elif format_type == "dgl":
        # DGL graph
        atomic_numbers = torch.argmax(molecule.ndata['a_1'], dim=-1).numpy()
        atomic_symbols = [atomic_symbol(z) for z in atomic_numbers]
        positions = molecule.ndata['x_1'].numpy()
    else:
        raise ValueError("Unsupported format type. Use 'rdkit' or 'dgl'.")

    # Write to XYZ file
    with open(filename, "w") as f:
        f.write(f"{len(atomic_numbers)}\n")
        f.write("Generated by molecule_to_xyz\n")
        for symbol, pos in zip(atomic_symbols, positions):
            f.write(f"{symbol} {pos[0]:.6f} {pos[1]:.6f} {pos[2]:.6f}\n")

def run_xtb(xyz_file):
    """
    Run xtb on an XYZ file and extract the HOMO-LUMO gap, dipole and energy.
    """
    # Run xtb
    result = subprocess.run(["xtb", xyz_file], capture_output=True, text=True)
    output = result.stdout
    
    rtn_dict = {}
    # homolumo
    tmp = extract_homo_lumo(output)
    rtn_dict["homolumo_gap"] = tmp[0]
    rtn_dict["lumo"] = tmp[1]
    rtn_dict["homo"] = tmp[2]
    # dipole
    rtn_dict["dipole"] = extract_dipole(output)
    # energy
    rtn_dict["energy"] = extract_energy(output)

    return rtn_dict

def compute_xtb(molecule, format_type):
    """
    Compute a homolumo, dipole, and energy for a molecule using xtb.

    Args:
        molecule: The molecule object (RDKit Mol or DGLGraph).
        format_type: The format of the molecule ("rdkit" or "dgl").
    Returns:
        A dictionary containing the computed quantities.
    """
    # Convert molecule to XYZ file
    xyz_file = "molecule.xyz"
    molecule_to_xyz(molecule, format_type, xyz_file)

    # Run xtb and compute the quantity
    value = run_xtb(xyz_file)

    # Clean up temporary file
    subprocess.run(["rm", xyz_file])
    subprocess.run(["rm", "charges"])
    subprocess.run(["rm", "wbo"])
    subprocess.run(["rm", "xtbrestart"])
    subprocess.run(["rm", "xtbtopo.mol"])

    return value